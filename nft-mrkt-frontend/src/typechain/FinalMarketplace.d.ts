/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FinalMarketplaceInterface extends ethers.utils.Interface {
  functions: {
    "addCollection(uint256)": FunctionFragment;
    "addMarketItem(address,uint256,uint256)": FunctionFragment;
    "buyMarketItem(uint256)": FunctionFragment;
    "collectionItems()": FunctionFragment;
    "collectionItemsArray(uint256)": FunctionFragment;
    "feeAccount()": FunctionFragment;
    "feePercent()": FunctionFragment;
    "getItemsForSale()": FunctionFragment;
    "getItemsOwnedByUser()": FunctionFragment;
    "getTotalPrice(uint256)": FunctionFragment;
    "itemCount()": FunctionFragment;
    "items(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addCollection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addMarketItem",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyMarketItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionItemsArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getItemsForSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getItemsOwnedByUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "itemCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "items", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "addCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionItemsArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeAccount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePercent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getItemsForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getItemsOwnedByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "itemCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "items", data: BytesLike): Result;

  events: {
    "MarketItemAdded(uint256,address,uint256,uint256,address)": EventFragment;
    "MarketItemPurchase(uint256,address,uint256,uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MarketItemAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketItemPurchase"): EventFragment;
}

export type MarketItemAddedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, string] & {
    itemId: BigNumber;
    nftCollection: string;
    tokenId: BigNumber;
    price: BigNumber;
    seller: string;
  }
>;

export type MarketItemPurchaseEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, string, string] & {
    itemId: BigNumber;
    nftCollection: string;
    tokenId: BigNumber;
    price: BigNumber;
    seller: string;
    buyer: string;
  }
>;

export class FinalMarketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FinalMarketplaceInterface;

  functions: {
    addCollection(
      _collectionItems: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMarketItem(
      _nft: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyMarketItem(
      _itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectionItems(overrides?: CallOverrides): Promise<[BigNumber]>;

    collectionItemsArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    feeAccount(overrides?: CallOverrides): Promise<[string]>;

    feePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    getItemsForSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getItemsOwnedByUser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTotalPrice(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    itemCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    items(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, string, boolean] & {
        itemId: BigNumber;
        nftCollection: string;
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
        sold: boolean;
      }
    >;
  };

  addCollection(
    _collectionItems: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMarketItem(
    _nft: string,
    _tokenId: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyMarketItem(
    _itemId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectionItems(overrides?: CallOverrides): Promise<BigNumber>;

  collectionItemsArray(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  feeAccount(overrides?: CallOverrides): Promise<string>;

  feePercent(overrides?: CallOverrides): Promise<BigNumber>;

  getItemsForSale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getItemsOwnedByUser(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTotalPrice(
    _itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  itemCount(overrides?: CallOverrides): Promise<BigNumber>;

  items(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, string, boolean] & {
      itemId: BigNumber;
      nftCollection: string;
      tokenId: BigNumber;
      price: BigNumber;
      seller: string;
      sold: boolean;
    }
  >;

  callStatic: {
    addCollection(
      _collectionItems: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addMarketItem(
      _nft: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyMarketItem(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collectionItems(overrides?: CallOverrides): Promise<BigNumber>;

    collectionItemsArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeAccount(overrides?: CallOverrides): Promise<string>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    getItemsForSale(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string, BigNumber, BigNumber, string, boolean] & {
        itemId: BigNumber;
        nftCollection: string;
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
        sold: boolean;
      })[]
    >;

    getItemsOwnedByUser(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string, BigNumber, BigNumber, string, boolean] & {
        itemId: BigNumber;
        nftCollection: string;
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
        sold: boolean;
      })[]
    >;

    getTotalPrice(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemCount(overrides?: CallOverrides): Promise<BigNumber>;

    items(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, string, boolean] & {
        itemId: BigNumber;
        nftCollection: string;
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
        sold: boolean;
      }
    >;
  };

  filters: {
    "MarketItemAdded(uint256,address,uint256,uint256,address)"(
      itemId?: null,
      nftCollection?: string | null,
      tokenId?: null,
      price?: null,
      seller?: string | null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, string],
      {
        itemId: BigNumber;
        nftCollection: string;
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
      }
    >;

    MarketItemAdded(
      itemId?: null,
      nftCollection?: string | null,
      tokenId?: null,
      price?: null,
      seller?: string | null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, string],
      {
        itemId: BigNumber;
        nftCollection: string;
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
      }
    >;

    "MarketItemPurchase(uint256,address,uint256,uint256,address,address)"(
      itemId?: null,
      nftCollection?: string | null,
      tokenId?: null,
      price?: null,
      seller?: string | null,
      buyer?: string | null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, string, string],
      {
        itemId: BigNumber;
        nftCollection: string;
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
        buyer: string;
      }
    >;

    MarketItemPurchase(
      itemId?: null,
      nftCollection?: string | null,
      tokenId?: null,
      price?: null,
      seller?: string | null,
      buyer?: string | null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, string, string],
      {
        itemId: BigNumber;
        nftCollection: string;
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
        buyer: string;
      }
    >;
  };

  estimateGas: {
    addCollection(
      _collectionItems: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMarketItem(
      _nft: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyMarketItem(
      _itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectionItems(overrides?: CallOverrides): Promise<BigNumber>;

    collectionItemsArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeAccount(overrides?: CallOverrides): Promise<BigNumber>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    getItemsForSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getItemsOwnedByUser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTotalPrice(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemCount(overrides?: CallOverrides): Promise<BigNumber>;

    items(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addCollection(
      _collectionItems: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMarketItem(
      _nft: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyMarketItem(
      _itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectionItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectionItemsArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getItemsForSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getItemsOwnedByUser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTotalPrice(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    items(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
