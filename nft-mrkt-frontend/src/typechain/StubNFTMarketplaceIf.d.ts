/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StubNFTMarketplaceIfInterface extends ethers.utils.Interface {
  functions: {
    "buyItem(address)": FunctionFragment;
    "createNftCollectionContract((string,string,string,string,address,address,uint256))": FunctionFragment;
    "getAllCollectionsForSale()": FunctionFragment;
    "getPrice(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "buyItem", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createNftCollectionContract",
    values: [
      {
        productName: string;
        symbol: string;
        metadataURI: string;
        imageURI: string;
        makerAddress: string;
        nftContractAddress: string;
        price: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCollectionsForSale",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [string]): string;

  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createNftCollectionContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCollectionsForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;

  events: {};
}

export class StubNFTMarketplaceIf extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StubNFTMarketplaceIfInterface;

  functions: {
    buyItem(
      collectionAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNftCollectionContract(
      _newNftCollection: {
        productName: string;
        symbol: string;
        metadataURI: string;
        imageURI: string;
        makerAddress: string;
        nftContractAddress: string;
        price: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllCollectionsForSale(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string, string, string, string, BigNumber] & {
          productName: string;
          symbol: string;
          metadataURI: string;
          imageURI: string;
          makerAddress: string;
          nftContractAddress: string;
          price: BigNumber;
        })[]
      ] & {
        collections: ([
          string,
          string,
          string,
          string,
          string,
          string,
          BigNumber
        ] & {
          productName: string;
          symbol: string;
          metadataURI: string;
          imageURI: string;
          makerAddress: string;
          nftContractAddress: string;
          price: BigNumber;
        })[];
      }
    >;

    getPrice(
      collectionAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  buyItem(
    collectionAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNftCollectionContract(
    _newNftCollection: {
      productName: string;
      symbol: string;
      metadataURI: string;
      imageURI: string;
      makerAddress: string;
      nftContractAddress: string;
      price: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllCollectionsForSale(
    overrides?: CallOverrides
  ): Promise<
    ([string, string, string, string, string, string, BigNumber] & {
      productName: string;
      symbol: string;
      metadataURI: string;
      imageURI: string;
      makerAddress: string;
      nftContractAddress: string;
      price: BigNumber;
    })[]
  >;

  getPrice(
    collectionAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    buyItem(
      collectionAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createNftCollectionContract(
      _newNftCollection: {
        productName: string;
        symbol: string;
        metadataURI: string;
        imageURI: string;
        makerAddress: string;
        nftContractAddress: string;
        price: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    getAllCollectionsForSale(
      overrides?: CallOverrides
    ): Promise<
      ([string, string, string, string, string, string, BigNumber] & {
        productName: string;
        symbol: string;
        metadataURI: string;
        imageURI: string;
        makerAddress: string;
        nftContractAddress: string;
        price: BigNumber;
      })[]
    >;

    getPrice(
      collectionAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    buyItem(
      collectionAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNftCollectionContract(
      _newNftCollection: {
        productName: string;
        symbol: string;
        metadataURI: string;
        imageURI: string;
        makerAddress: string;
        nftContractAddress: string;
        price: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllCollectionsForSale(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(
      collectionAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyItem(
      collectionAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNftCollectionContract(
      _newNftCollection: {
        productName: string;
        symbol: string;
        metadataURI: string;
        imageURI: string;
        makerAddress: string;
        nftContractAddress: string;
        price: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllCollectionsForSale(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      collectionAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
