/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IFinalMarketplaceInterface extends ethers.utils.Interface {
  functions: {
    "addCollection(address)": FunctionFragment;
    "addMakerProductLines(address,address)": FunctionFragment;
    "addMarketItem(address,uint256,uint256)": FunctionFragment;
    "buyMarketItem(uint256)": FunctionFragment;
    "chooseCollection(uint256)": FunctionFragment;
    "getItemsForSale()": FunctionFragment;
    "getItemsOwnedByUser()": FunctionFragment;
    "getMakerContractToAdmin(address)": FunctionFragment;
    "getMakerProductLines(address)": FunctionFragment;
    "getTotalPrice(uint256)": FunctionFragment;
    "setMakerContractToAdmin(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addCollection",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addMakerProductLines",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addMarketItem",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyMarketItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chooseCollection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getItemsForSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getItemsOwnedByUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMakerContractToAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMakerProductLines",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMakerContractToAdmin",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMakerProductLines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chooseCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getItemsForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getItemsOwnedByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMakerContractToAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMakerProductLines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMakerContractToAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class IFinalMarketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IFinalMarketplaceInterface;

  functions: {
    addCollection(
      _nftCollectionAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMakerProductLines(
      _maker: string,
      _newProductLine: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMarketItem(
      _nft: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyMarketItem(
      _itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chooseCollection(
      _collectionIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getItemsForSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getItemsOwnedByUser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMakerContractToAdmin(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMakerProductLines(
      _maker: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getTotalPrice(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setMakerContractToAdmin(
      _makerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addCollection(
    _nftCollectionAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMakerProductLines(
    _maker: string,
    _newProductLine: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMarketItem(
    _nft: string,
    _tokenId: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyMarketItem(
    _itemId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chooseCollection(
    _collectionIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getItemsForSale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getItemsOwnedByUser(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMakerContractToAdmin(
    _admin: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getMakerProductLines(
    _maker: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getTotalPrice(
    _itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setMakerContractToAdmin(
    _makerContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCollection(
      _nftCollectionAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addMakerProductLines(
      _maker: string,
      _newProductLine: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addMarketItem(
      _nft: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyMarketItem(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    chooseCollection(
      _collectionIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getItemsForSale(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, string, boolean] & {
        itemId: BigNumber;
        nftCollection: string;
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
        forSale: boolean;
      }
    >;

    getItemsOwnedByUser(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, string, boolean] & {
        itemId: BigNumber;
        nftCollection: string;
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
        forSale: boolean;
      }
    >;

    getMakerContractToAdmin(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getMakerProductLines(
      _maker: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getTotalPrice(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMakerContractToAdmin(
      _makerContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addCollection(
      _nftCollectionAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMakerProductLines(
      _maker: string,
      _newProductLine: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMarketItem(
      _nft: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyMarketItem(
      _itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chooseCollection(
      _collectionIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getItemsForSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getItemsOwnedByUser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMakerContractToAdmin(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMakerProductLines(
      _maker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPrice(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMakerContractToAdmin(
      _makerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCollection(
      _nftCollectionAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMakerProductLines(
      _maker: string,
      _newProductLine: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMarketItem(
      _nft: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyMarketItem(
      _itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chooseCollection(
      _collectionIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getItemsForSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getItemsOwnedByUser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMakerContractToAdmin(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMakerProductLines(
      _maker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPrice(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMakerContractToAdmin(
      _makerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
